//file:noinspection ConfigurationAvoidance
//file:noinspection GrMethodMayBeStatic

import java.util.stream.Collectors

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.hibernate.orm' version '6.5.2.Final'
    id "org.openjfx.javafxplugin" version "0.1.0"
    id "application"
}

group = 'com.wedasoft'
version = '2.3.1'

repositories {
    mavenCentral()
    // mavenLocal()
}

ext {
    javaFxVersion = "17.0.10"
    javaVersion = 17
    customTasksGradleGroupName = '_custom tasks (javafx spring boot application)'
}

dependencies {
    // Spring boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Database
    implementation 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JavaFX
    implementation "org.openjfx:javafx-controls:${javaFxVersion}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}"
    implementation "org.openjfx:javafx-base:${javaFxVersion}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}"

    // WedasoftFX
    implementation 'com.wedasoft:wedasoftfxguicommons:1.0.0'
    implementation 'com.wedasoft:wedasoftfxtestbase:1.0.0'
}

application {
    mainClass = 'com.wedasoft.javafxspringbootgradleapp.JfxSpringBootAppLauncher'
}

javafx {
    version = "${javaFxVersion}"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

//noinspection GroovyAssignabilityCheck
tasks.named('test') {
    //noinspection GrUnresolvedAccess
    useJUnitPlatform()
}

//============================================================
// CUSTOM TASKS
//============================================================
task cleanBuildDir(type: DefaultTask) {
    group = "${customTasksGradleGroupName}"
    dependsOn clean
}

task runJfxSpringBootApp(type: DefaultTask) {
    group = "${customTasksGradleGroupName}"
    dependsOn bootRun
}

task buildExecutableJar(type: DefaultTask) {
    group = "${customTasksGradleGroupName}"
    dependsOn bootJar
}

task packageAsAppImage(type: Exec) {
    group = "${customTasksGradleGroupName}"
    dependsOn buildExecutableJar

    doFirst {
        println "Loading Spring Boot application.properties..."
        final def applicationProperties = loadSpringApplicationProperties()
        println "\tSpring Boot application.properties loaded."

        println "Find and validate main jar..."
        final def mainJar = findAndValidateMainJar()
        println "\tMain jar found.\n\tPath: ${mainJar.toString()}"

        println "Creating and preparing output dir..."
        final def outputDir = createAndPrepareOutputDir()
        println "\tOutput dir created.\n\tPath: ${outputDir.toString()}"

        println "Determining Java version for using JPackage..."
        final def javaVersionString = getJavaVersionForJpackage()
        println "\tJava version determined via 'java --version':\n${javaVersionString}"

        println("Creating JPackage command...")
        ArrayList<String> jPackageCommand = [
                "jpackage",
                "--type", "app-image",
                "--input", new File(getBuildDir(), "libs").toString(),
                "--main-jar", mainJar.name,
                "--dest", outputDir.toString(),
                "--name", (applicationProperties['spring.application.name'] ?: 'DefaultAppName'),
                "--app-version", version
        ]
        println "\tJPackage command created.\n\tCommand without double quotes: ${jPackageCommand.join(' ')}"

        println "Executing JPackage command via commandLine..."
        commandLine jPackageCommand
        println "\tJPackage command executed."
    }
}

private Properties loadSpringApplicationProperties() {
    def applicationProperties = new Properties()
    file('src/main/resources/application.properties').withInputStream { applicationProperties.load(it) }
    return applicationProperties
}

private File findAndValidateMainJar() {
    def mainJar = new File(getBuildDir(), "libs").listFiles().find { it.name.endsWith('.jar') }
    if (mainJar == null) {
        throw new GradleException("No JAR file found in build/libs.")
    }
    return mainJar
}

private File createAndPrepareOutputDir() {
    File jPackageOutputDir = new File(getBuildDir(), "jpackage")
    if (jPackageOutputDir.exists()) {
        jPackageOutputDir.deleteDir()
    }
    jPackageOutputDir.mkdirs()
    return jPackageOutputDir
}

private File getBuildDir() {
    return layout.getBuildDirectory().getAsFile().get() as File
}

private String getJavaVersionForJpackage() {
    def process = "java --version".execute()
    def output = new StringBuffer()
    process.consumeProcessOutput(output, new StringBuffer())
    process.waitFor()

    return "\t" + Arrays.stream(output.toString().split("\n"))
            .filter { !it.isBlank() }
            .collect(Collectors.joining("\n\t"))
}
